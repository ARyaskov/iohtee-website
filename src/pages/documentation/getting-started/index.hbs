<section class="row">
    <div class="large-4 column">&nbsp;</div>
    <div class="large-6 column content">
        <h1>Getting Started</h1>
        <p>
            An idea behind Machinomy project is to allow any device to pay another
            device a minuscule amount of money over the internet. In short: to provide a viable means of exchange
            for machine economy. Current implementation is a Node.js package. It represents a somewhat constrained vision:
            allows a device to instantly pay a fraction of Ether over HTTP, no trust established.
            Actually, the device is a networked computer able to run geth
            and Node.js. A server or your laptop qualify, as well as Raspberry Pi board.
        </p>

        <p>
            Paying over HTTP for service implies there is a buyer and a seller. As a simplification for future developments,
            buyer is called <i>sender</i>, and seller is named <i>receiver</i> in code.
        </p>
        <p class="text-center">
            <img src="{{root}}assets/img/documentation/getting-started/buyer_seller.svg" width="40%" />
        </p>

        <h2>Install</h2>
        <pre><code class="nohighlight">$ npm install -g machinomy</code></pre>
        <p>
            Then set it all up using your ethereum account. By default, machinomy uses a current test network
            <a href="//blog.ethereum.org/2016/11/20/from-morden-to-ropsten/">Ropsten</a>
            to prevent erroneous expenditures. Console commands also assume
            you act on behalf of sender side.
        </p>
        <script type="text/javascript" src="https://asciinema.org/a/7prjv1opg5fzcmao2d9u2w82y.js" data-theme="solarized-light" id="asciicast-7prjv1opg5fzcmao2d9u2w82y" async></script>
        <p>
            For a receiver side provide an option <code>-n receiver</code> or <code>--namespace receiver</code>.
        </p>
        <script type="text/javascript" src="https://asciinema.org/a/0yo57pswmuaw1k5i9cxmnngtt.js" data-theme="solarized-light" id="asciicast-0yo57pswmuaw1k5i9cxmnngtt" async></script>
        <p>
            You could override any password provided here using environment variable, as will be shown below.
        </p>

        <h2>Buy</h2>
        <p>
            Now, after you set it up, start local geth instance on <code>http://localhost:8545</code>. For now, machinomy is not itself an Ethereum node.
            Then, issue <code>machinomy buy</code> command:
        </p>
        <script type="text/javascript" src="https://asciinema.org/a/c8vq6vc2qtpnp1u3ogiwz3ow4.js" data-theme="solarized-light" id="asciicast-c8vq6vc2qtpnp1u3ogiwz3ow4" async></script>
        <p>
            This goes to the server, gets the price and sends the money required.
            By the way it finds out there is no payment channel available, so it also opens a channel to send the money.
            For now, it suffices to say a payment channel is a way to securely transfer money off-chain.
            Details on that matter will be published later.
        </p>
        <p>
            To override a password set in configuration file pass it in environment variable
            <code>MACHINOMY_SENDER_PASSWORD</code>. Optionally, you could enable <code>verbose</code> or <code>debug</code>
            logging:
        </p>
        <pre><code class="nohighlight">$ MACHINOMY_SENDER_PASSWORD=RealPa$$w0rd \
LOG_LEVEL=verbose \
machinomy buy http://playground.machinomy.com/hello</code></pre>
        <p>
            A developer is free to use the underlying API. The console command serves illustrative purpose only.
            Below is a javascript file, that does the same as the command above:
        </p>
        <pre><code class="javascript">"use strict";

const machinomy = require("machinomy");
const uri = "http://playground.machinomy.com/hello";

const settings = machinomy.configuration.sender();
machinomy.buy(uri, settings.account, settings.password, function (err, contents) {
    if (err) throw err;
    console.log(contents);
});</code></pre>

        <h2>Sell</h2>
        <p>
            Machinomy integrates with <a href="//expressjs.com/">Express</a> providing a middleware to sell a service over HTTP.
            One needs to add few lines of code to a conventional Express application to accept payments.
        </p>
        <pre><code class="javascript">"use strict";

const express    = require("express"),
      bodyParser = require("body-parser"),
      machinomy  = require("machinomy");

const BASE = "http://localhost:3000";

const settings = machinomy.configuration.receiver();
let paywall = new machinomy.Paywall(settings.account, BASE);

let app = express();
app.use(bodyParser.json());
app.use(paywall.middleware());

app.get("/hello", paywall.guard(1000, function (req, res) {
    res.write("Have just received 1000 wei.\n");
    res.end("Hello, meat world!");
}));

app.listen(8080, function(_) {
    console.log(`Waiting at ${BASE}/hello ...`);
});
</code></pre>
        <p>
            The middleware intercepts <code>Payment</code> header, and checks its contents (=token) against
            open channels. If the token is invalid or absent, the client is redirected to a payment gateway
            page and asked a specific amount to pay. Then the client sends the payment to the gateway,
            and gets back to the original URL, now with the token. The content is returned, as there is no middleware.
        </p>
        <p class="text-center">
            <img src="{{root}}assets/img/documentation/getting-started/channel_overview.svg" width="80%" />
        </p>
        <p>
            The middleware depends on geth instance running on <code>http://localhost:8545</code>.
            Also you need to provide details on account to accept payments to. To do that, run <code>setup</code>
            command for receiver side:
        </p>
        <pre><code class="nohighlight">$ machinomy setup --namespace receiver</code></pre>
        <p>
            Otherwise the code runs on any machine just like any other NodeJS code, and is
            invisible to your application.
        </p>
        <pre><code class="nohighlight">$ node server.js</code></pre>
        <p>
            Instead of putting a password in a configuration file in clear text, one could set it via environment
            variable <code>MACHINOMY_RECEIVER_PASSWORD</code>. Log level is adjusted via environment variable too.
        </p>
        <pre><code class="nohighlight">$ MACHINOMY_RECEIVER_PASSWORD=rece1verPa$$w0rd \
LOG_LEVEL=verbose \
node server.js</code></pre>
        <p>
            You could test the server code above on your local machine by buying a service.
        </p>
        <script type="text/javascript" src="https://asciinema.org/a/4r73cyxqlz6jysow1lioqpgl7.js" data-theme="solarized-light" id="asciicast-4r73cyxqlz6jysow1lioqpgl7" async></script>

        <h2>Settle</h2>
        <p>
            Payment channel transfers money off chain. At the end of the day a seller of the service would like
            to get the money, that is to move the money on chain or settle the channel. Seller of the service,
            that is receiver of the money, could settle the channel right away. There is a caveat. While settling
            the receiver sends a transaction to Ethereum network, and it costs some gas/ether. Currently, the cost
            of the settling transaction is under 0.002 Ether (65510 gas). Make sure you have
            at least 0.002 Ether on the receiverâ€™s account.
        </p>
        <script type="text/javascript" src="https://asciinema.org/a/b7au5s8u64jwjzla83g9hgxjp.js" data-theme="solarized-light" id="asciicast-b7au5s8u64jwjzla83g9hgxjp" async></script>
        <p>
            Sender <em>initiates</em> channel setting. This signals the seller to settle the channel.
            The sender can not settle the channel right away. It would allow her to cheat by settling on a value less than
            sent one. The sender initiates channel settling by the same <code>machinomy close</code> command. The get the funds
            a receiver is expected to finish settle on her side.
        </p>
        <script type="text/javascript" src="https://asciinema.org/a/afpkbdasj78bz0i0kaj5hr2fx.js" data-theme="solarized-light" id="asciicast-afpkbdasj78bz0i0kaj5hr2fx" async></script>

        <h2>Next Step</h2>
        <p>
            Now play and build something. What you can do with micropayments is the most interesting thing now.
            Few ideas to foster your imagination:
        </p>
        <ul>
            <li>pay-per-call photo filter API like <a href="//prisma-ai.com/">Prisma</a>,</li>
            <li>pay-per-call artificial intelligence API, like <a href="https://cloud.google.com/prediction/">Google Prediction API</a>,</li>
            <li>per-per-minute jukebox,</li>
            <li>pay-per-kWh charging station,</li>
            <li>pay-per-cookie vending machine.</li>
        </ul>
        <p>
            Feel free to share your thoughts and questions on <a href="{{ urls.gitter }}">Gitter Chat</a>,
            and follow on <a href="{{ urls.twitter}}">Twitter</a> for updates.
        </p>
    </div>
    <div class="large-2 column">&nbsp;</div>
</section>
